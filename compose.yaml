version: "3.8"
services:

  nginx:
    container_name: nginx
    image: nginx:1.23
    volumes:
      - type: bind
        source: ./config/nginx/nginx.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true
    ports:
      - 80:80
    depends_on:
      - backend

  postgres:
    container_name: postgres
    image: postgres:15.0-alpine 
    restart: always
    user: postgres
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
      interval: 1s
      timeout: 5s
      retries: 10

  backend:
    container_name: backend
    restart: "no"
    build:
      context: .
      dockerfile: cmd/backend/Dockerfile
      target: final
    environment:
      PORT: 1100
      LOGS_FORMAT: console
      PGHOST: postgres
      PGNAME: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
      PGPASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    links:
      - postgres
    ports:
      - 1100:1100
    expose:
      - 1100

  migrations:
    container_name: migrations
    image: migrate/migrate:v4.15.2
    volumes:
      - ./migrations:/migrations
    command:
      [
        "-path",
        "/migrations",
        "-database",
        "postgres://postgres:5432/${POSTGRES_DB}?user=${POSTGRES_USER}&password=${POSTGRES_PASSWORD}&sslmode=disable",
        "-verbose",
        "up",
      ]
    links:
      - postgres
    depends_on:
      postgres:
        condition: service_healthy

  backups:
    container_name: backups
    image: prodrigestivill/postgres-backup-local:15
    restart: always
    user: postgres:postgres # Optional: see below
    volumes:
      - ./dbbackups:/backups
      - backup_data:/var/lib/postgresql/data
    links:
      - postgres
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - 8080:8080
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_EXTRA_OPTS: -Z6 --schema=public --blobs
      SCHEDULE: "@hourly" # valid values are @yearly, @monthly, @weekly, @daily, @hourly
      BACKUP_KEEP_DAYS: 7
      BACKUP_KEEP_WEEKS: 4
      BACKUP_KEEP_MONTHS: 6
      HEALTHCHECK_PORT: 8080

  frontend:
    container_name: frontend
    restart: always
    build:
      context: frontend
      target: development
    ports:
      - 3000:3000
    depends_on:
      - backend
    expose:
      - 3000
    volumes:
      - ./frontend/src:/app/src

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.44.0
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_volume:/prometheus

  grafana:
    container_name: grafana
    image: grafana/grafana:9.5.2
    ports:
      - 3001:3000
    expose:
      - 3001
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./config/grafana:/etc/grafana/provisioning/datasources
      - grafana_data:/var/lib/grafana

  loki:
    container_name: loki
    image: grafana/loki:2.8.2
    ports:
      - 3100:3100

  tempo:
    container_name: tempo
    image: grafana/tempo:2.1.1
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/tempo/tempo.yaml:/etc/tempo.yaml
      - tempo_data:/tmp/tempo
    ports:
      - "3200"   # tempo

volumes:
  postgres_volume:
  backup_data:
  prometheus_volume:
  grafana_data:
  tempo_data:
